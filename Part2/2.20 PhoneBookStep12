import { useState, useEffect } from 'react' 
import Filter from './components/FilterName'
import PersonForm from './components/PersonalData'
import Persons from './components/PersonsShow'
import pBookService from './services/phonebook'
import Notification from './components/errorNotification'

const App = () => {
  const [persons, setPersons] = useState([])
  const [newName, setNewName] = useState('')
  const [newPhone, setNewPhone] = useState('')
  const [filter, setFilter] = useState('')
  const [message, setMessage] = useState(null)
  const [typeMessage, setTypeMessage] = useState()


  useEffect(() => {
    pBookService
      .getAll()
      .then(initialData => {
        setPersons(initialData)
      })
  }, [])

  const handleFilter = (e) => {
    setFilter(e.target.value)    
  }

  const validNewName = (e) => {
    e.preventDefault()
    const name = persons.map(e => e.name)
    if (name.includes(newName)) {
      const data = persons.find(n => n.name === newName)
      const changeData = {...data, number: newPhone}
      const confirmData = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)
      if (confirmData) {
        pBookService
          .update(data.id, changeData)
          .then(returnedData => {
            setMessage(`"${newName}'s" data was update`)
            setTypeMessage(false)
            setTimeout(() => {
              setMessage(null)
            }, 5000)
            setPersons(persons.map(n => n.name !== newName ? n : returnedData))
            setNewName('')
            setNewPhone('')
          })        
      }
    }else {
      addNewName()
    }
  }

  const addNewName = (e) => {
    const nameObjet = {
      name: newName,
      number: newPhone,
    }

    pBookService
      .create(nameObjet)
      .then(returnedData => {
        setMessage(`Added "${newName}" to phonebook`)
        setTypeMessage(false)
        setTimeout(() => {
          setMessage(null)
        }, 5000)
        setPersons(persons.concat(returnedData))
        setNewName('')
        setNewPhone('')    
      })
      .catch(error => {
        setMessage(`Note: something was wrong`)
        setTypeMessage(true)
        setTimeout(() => {
          setMessage(null)
        }, 5000)
      })
  }

  const handleNameChange = (e) => {
    setNewName(e.target.value)
  }

  const handlePhoneChange = (e) => {
    setNewPhone(e.target.value)
  } 

  return (
    <div>
      <h2>PhoneBook</h2>
      <Notification message={message} typeMessage={typeMessage} />
      <Filter value={filter} func={handleFilter} />      

      <h2>Add a new</h2>
      <PersonForm 
        valueName={newName} 
        valueNumber={newPhone} 
        funcForm={validNewName} 
        funcName={handleNameChange} 
        funcNumber={handlePhoneChange}
      />

      <h2>Numbers</h2>
      <Persons value={filter} data={persons} />
        
    </div>
  )
}


export default App;

// Persons
import { useState } from 'react' 
import NewName from "./ShowData";
import pBookService from '../services/phonebook'
import Notification from './errorNotification'

const Persons = ({ value, data }) => {
  const [message, setMessage] = useState(null)
  const [typeMessage, setTypeMessage] = useState()

  const deletedDataOf = (ele) => {
    console.log(ele);
    if (window.confirm(`Delete ${ele.name}`)) {
      pBookService
      .deleted(ele.id)
      .then(reloadPage => {
        setMessage(`Note: "${ele.name}" was deleted from phonebook`)
        setTypeMessage(false)
        setTimeout(() => {
          setMessage(null)
          document.location.reload(true)
        }, 5000)
      })
      .catch(error => {
        setMessage(`Note: "${ele.name}'s" data was deleted yet from phonebook`)
        setTypeMessage(true)
        setTimeout(() => {
          setMessage(null)
        }, 5000)
      })
    }
  }  

  const Normal = ({data}) => data.map(ele => 
      <NewName 
      key={ele.id} 
      data={ele} 
      deletedData={() => deletedDataOf(ele)} 
  />)

  const Filter = ({data, value}) => {
    const newPersons = data.filter(e => e.name.slice(0,1) === value.toUpperCase())
    if (newPersons.length !== 0) {
      console.log('-> Finally1')
      return newPersons.map(ele => 
            <NewName 
            key={ele.id} 
            data={ele} 
            deletedData={() => deletedDataOf(ele)}
            />)
    }else {
      return alert('Nothing to show')
    }
  }  


  if (value === '') {
    return (
      <>
        <Notification message={message} typeMessage={typeMessage} />
        <ul>
          <Normal data={data} />
        </ul>
      </>
    )
  }else {
    return (
      <>
        <Notification message={message} typeMessage={typeMessage} />
        <ul>
          <Filter data={data} value={value} />
        </ul>
      </>
    )
  }
}

export default Persons

