//Also update the handling of the api/persons/:id and info routes to use the database, 
//and verify that they work directly with the browser, Postman, or VS Code REST client.

//Inspecting an individual phonebook entry from the browser.

require('dotenv').config()
const express = require('express')
const app = express()
const Person = require('../models/person')

app.use(express.static('build'))
app.use(express.json())

const unknownEndpoint = (req, res) => {
  res.status(400).send({error: 'unknown endpoint'})
}

const errorHandler = (error, req, res, next) => {
  console.log(error.message)
  if (error.name === 'CastError') {
    return res.status(400).send({ error: 'marformatted id' })
  }
  next(error)
}

app.get('/', (req, res) => {
    res.send('<h1>Wellcome to Phone Book Backend</h1>')
})

app.get('/api/persons', (req, res) => {
  Person.find({}).then (data => {
    res.json(data)
  })
})

app.get('/info', (req, res) => {
  res.send(`<h3> Phonebook has info for ${Person.length} people <br> ${new Date()} </h3>`)
})

app.get('/api/persons/:id', (req, res) => {
  Person.findById(req.params.id).then(person => {
    if (person) {
      res.json(person)
    } else {
      res.status(404).end()
    }
  })
  .catch(error => next(error))
})

app.delete('/api/persons/:id', (req, res) => {
  Person.findByIdAndDelete(req.params.id)
    .then(result => {
      res.status(204).end()
    })
    .catch(error => next(error))
})

app.put('/api/persons/:id', (req, res) => {
  const body = req.body

  const newData = {
    name: body.name,
    number: body.number,
  }

  Person.findByIdAndUpdate(req.params.id, newData, { new: true })
    .then(updatePerson => {
      res.json(updatePerson)
    })
    .catch(error => next(error))
  // persons = persons.map (n => n.id !== id ? n : newData)
  // res.json(newData)
})

app.post('/api/persons', (req, res) => {
  const newPerson = req.body
  console.log(newPerson.name, newPerson.number);

  if (!newPerson.name || !newPerson.number) {
    return res.status(404).json({ error: 'content missing' })
  }

  const person = new Person({
    name: newPerson.name,
    number: newPerson.number,
  })

  person.save().then(savedPerson => {
    res.json(savedPerson)
  })
})

app.use(unknownEndpoint)
app.use(errorHandler)

const PORT = process.env.PORT || 3001
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})
