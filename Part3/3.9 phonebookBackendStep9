import { useState, useEffect } from 'react' 
import Filter from './components/FilterName'
import PersonForm from './components/PersonalData'
import Persons from './components/PersonsShow'
import pBookService from './services/phonebook'
import Notification from './components/errorNotification'

const App = () => {
  const [persons, setPersons] = useState([])
  const [newName, setNewName] = useState('')
  const [newPhone, setNewPhone] = useState('')
  const [filter, setFilter] = useState('')
  const [message, setMessage] = useState(null)
  const [typeMessage, setTypeMessage] = useState()


  useEffect(() => {
    pBookService
      .getAll()
      .then(initialData => {
        console.log('Promise fulfiled');
        setPersons(initialData)
      })
  }, [])

  const handleFilter = (e) => {
    setFilter(e.target.value)    
  }

  const validNewName = (e) => {
    e.preventDefault()
    const name = persons.map(e => e.name)
    if (name.includes(newName)) {
      const data = persons.find(n => n.name === newName)
      const changeData = {...data, number: newPhone}
      const confirmData = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)
      if (confirmData) {
        pBookService
          .update(data.id, changeData)
          .then(returnedData => {
            setMessage(`"${newName}'s" data was update`)
            setTypeMessage(false)
            setTimeout(() => {
              setMessage(null)
            }, 5000)
            setPersons(persons.map(n => n.name !== newName ? n : returnedData))
            setNewName('')
            setNewPhone('')
          })        
      }
    }else {
      addNewName()
    }
  }

  const addNewName = (e) => {
    const nameObjet = {
      id: Math.floor(Math.random() * 1000),
      name: newName,
      number: newPhone,
    }

    pBookService
      .create(nameObjet)
      .then(returnedData => {
        setMessage(`Added "${newName}" to phonebook`)
        setTypeMessage(false)
        setTimeout(() => {
          setMessage(null)
        }, 5000)
        setPersons(returnedData)
        setNewName('')
        setNewPhone('')    
      })
      .catch(error => {
        setMessage(`Note: something was wrong`)
        setTypeMessage(true)
        setTimeout(() => {
          setMessage(null)
        }, 5000)
      })
  }

  const handleNameChange = (e) => {
    setNewName(e.target.value)
  }

  const handlePhoneChange = (e) => {
    setNewPhone(e.target.value)
  } 

  return (
    <div>
      <h2>PhoneBook</h2>
      <Notification message={message} typeMessage={typeMessage} />
      <Filter value={filter} func={handleFilter} />      

      <h2>Add a new</h2>
      <PersonForm 
        valueName={newName} 
        valueNumber={newPhone} 
        funcForm={validNewName} 
        funcName={handleNameChange} 
        funcNumber={handlePhoneChange}
      />

      <h2>Numbers</h2>
      <Persons value={filter} data={persons} />
        
    </div>
  )
}


export default App;

// Backend
const express = require('express')
const app = express()
const morgan = require('morgan')
const cors = require('cors')

app.use(express.json())
app.use(cors())

let persons = [
    { 
        "id": 1,
        "name": "Arto Hellas", 
        "number": "040-123456"
      },
      { 
        "id": 2,
        "name": "Ada Lovelace", 
        "number": "39-44-5323523"
      },
      { 
        "id": 3,
        "name": "Dan Abramov", 
        "number": "12-43-234345"
      },
      { 
        "id": 4,
        "name": "Mary Poppendieck", 
        "number": "39-23-6423122"
      }
]

const unknownEndpoint = (req, res) => {
  res.status(400).send({error: 'unknown endpoint'})
}


morgan.token('body', (req) => JSON.stringify(req.body))
app.use(morgan(':url :method :body'))

app.get('/', (req, res) => {
    res.send('<h1>Wellcome to Phone Book Backend</h1>')
})

app.get('/api/persons', (req, res) => {
    res.json(persons)
})

app.get('/info', (req, res) => {
  res.send(`<h3> Phonebook has info for ${persons.length} people <br> ${new Date()} </h3>`)
})

app.get('/api/persons/:id', (req, res) => {
  const id = Number(req.params.id)
  const person = persons.find(e => e.id === id)
  person ? res.json(person) : res.status(404).send({ error: 'Unknown ID' }).end()
})

app.delete('/api/persons/:id', (req, res) => {
  const id = Number(req.params.id)
  persons = persons.filter(e => e.id !== id)
  res.status(202).end()
})

app.put('/api/persons/:id', (req, res) => {
  const id = Number(req.params.id)
  const newData = req.body
  persons = persons.map (n => n.id !== id ? n : newData)
  res.json(newData)
})

app.post('/api/persons', (req, res) => {
  const newPerson = req.body
  
  persons = persons.concat(newPerson)
  res.json(persons)
})

app.use(unknownEndpoint)

const PORT = 3001

app.listen(PORT)
console.log(`Server running on port ${PORT}`)
